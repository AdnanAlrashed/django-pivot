Django Pivot-Tables
===================

This package provides utilities for turning Django Querysets into
`Pivot-Tables <https://en.wikipedia.org/wiki/Pivot_table>`.

Examples
--------

I am going to shamelessly lift examples from the wikipedia page referenced in the header.
Here is part of the table of shirt sales:

======  ======  ====== ========== ====== ====== ======
Region  Gender  Style  Ship Date   Units  Price  Cost
======  ======  ====== ========== ====== ====== ======
East    Boy     Tee     1/31/2005     12  11.04  10.42
East    Boy     Golf    1/31/2005     12     13   12.6
East    Boy     Fancy   1/31/2005     12  11.96  11.74
East    Girl    Tee     1/31/2005     10  11.27  10.56
East    Girl    Golf    1/31/2005     10  12.12  11.95
East    Girl    Fancy   1/31/2005     10  13.74  13.33
West    Boy     Tee     1/31/2005     11  11.44  10.94
West    Boy     Golf    1/31/2005     11  12.63  11.73
West    Boy     Fancy   1/31/2005     11  12.06  11.51
West    Girl    Tee     1/31/2005     15  13.42  13.29
West    Girl    Golf    1/31/2005     15  11.48  10.67
Etc.
======  ======  ====== ========== ====== ====== ======

We might want to know How many *Units* did we sell in each *Region* for every *Ship Date*?
And get a result like:

======== ========= ========= ========= ========= =========
Region   1/31/2005 2/1/2005  2/2/2005  2/3/2005  2/4/2005
======== ========= ========= ========= ========= =========
East            66        80       102        93       114
North           86        91        95        88       107
South           73        78        84        76        91
West            92       103       111       104       123
======== ========= ========= ========= ========= =========

It takes 3 quantities to pivot the original table into the summary result, two columns and
an aggregate of a third column. In this case the two columns are Region and Ship Date, the
third column is Units and the aggregate is Sum


Basic usage
-----------

*The pivot function*

Pivot tables are generated by the pivot function, which takes a Model and 3 attribute names,
to make a pivot table like the example above:

>>> pivot_table = pivot(ShirtSales, 'shipped', 'region', 'units')

The result is a ValuesQuerySet, which means the objects returned are dictionaries. Each
dictionary has a key for the row ('shipped' dates in this case) and a key for every value
of the column ('region' in this case).

>>> for record in pivot_table:
...     print record
... {u'West': 59, 'shipped': datetime.date(2004, 12, 24), u'East': 71, u'North': 115, u'South': 56}
... {u'West': 55, 'shipped': datetime.date(2005, 1, 31), u'East': 65, u'North': 121, u'South': 66}
... {u'West': 56, 'shipped': datetime.date(2005, 2, 1), u'East': 62, u'North': 124, u'South': 68}
... {u'West': 56, 'shipped': datetime.date(2005, 2, 2), u'East': 59, u'North': 127, u'South': 71}
... {u'West': 66, 'shipped': datetime.date(2005, 3, 1), u'East': 55, u'North': 131, u'South': 65}
... {u'West': 68, 'shipped': datetime.date(2005, 3, 2), u'East': 56, u'North': 130, u'South': 62}
... {u'West': 71, 'shipped': datetime.date(2005, 4, 3), u'East': 56, u'North': 130, u'South': 59}
... {u'West': 65, 'shipped': datetime.date(2005, 5, 6), u'East': 66, u'North': 120, u'South': 55}

The first argument can be a Model, QuerySet, or Manager. This allows you to generate a pivot
table filtered by another column. For example, you may want to know how many units were sold
in each region for every shipped date, but only for Golf shirts:

>>> pivot_table = pivot(ShirtSales.objects.filter(style='Golf'), 'region', 'shipped', 'units')

The pivot function takes an option parameter for how to aggregate the data. For example,
instead of the total units sold in each region for every ship date, we might be interested in
the average number of units per order. Then we can pass the Avg aggregation function

>>> from django.db.models import Avg
>>> pivot_table = pivot(ShirtSales, 'region', 'shipped', 'units', aggregation=Avg)

If your data is stored across multiple tables, just use Django's double underscore notation
to traverse foreign key relationships. For example, instead of the ShirtSales model having
a *region* attribute, it might have a foreign key to a Store model, which in turn has a
foreign key to a Region model, which has an attribute called name. Then our pivot call looks
like

>>> pivot_table = pivot(ShirtSales, 'store__region__name', 'shipped', 'units')

It's also possible that the data column we are aggregating over should be a computed column.
In our example ShirtSales model we are storing the number of units and the price per
unit, but not the total cost of the order. If we want to know the average order size in
dollars in each region for every ship date, we can pivot the ShirtSales table:

>>> from django.db.models import F, Avg
>>> pivot_table = pivot(ShirtSales, 'region', 'shipped', F('units') * F('price'), Avg)

*The histogram function*

This library also supports creating histograms from a single column of data with the
histogram function, which takes a Model, a single attribute name and an iterable of left edges
of bins.

>>> hist = histogram(ShirtSales, 'units', bins=[0, 10, 15])

Like *pivot*, the first argument can be a Model, QuerySet, or Manager. The result is a
dictionary with a string version of the bin edges for keys, e.g.:

>>> hist
{u'0': 106, u'15': 53, u'10': 81}

